/* 
 * Sample Post Office API
 *
 * This is a sample post office API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITransfersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List transfer sources
        /// </summary>
        /// <remarks>
        /// Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SourcesGet ();

        /// <summary>
        /// List transfer sources
        /// </summary>
        /// <remarks>
        /// Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SourcesGetWithHttpInfo ();
        /// <summary>
        /// List transfer source&#x27;s destinations
        /// </summary>
        /// <remarks>
        /// Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns></returns>
        void SourcesIdDestinationsGet (string id);

        /// <summary>
        /// List transfer source&#x27;s destinations
        /// </summary>
        /// <remarks>
        /// Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SourcesIdDestinationsGetWithHttpInfo (string id);
        /// <summary>
        /// List money transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransferList</returns>
        TransferList TransfersGet ();

        /// <summary>
        /// List money transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransferList</returns>
        ApiResponse<TransferList> TransfersGetWithHttpInfo ();
        /// <summary>
        /// Cancel a money transfer
        /// </summary>
        /// <remarks>
        /// Only delayed or recurring money transfer can be canceled
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns></returns>
        void TransfersIdDelete (string id);

        /// <summary>
        /// Cancel a money transfer
        /// </summary>
        /// <remarks>
        /// Only delayed or recurring money transfer can be canceled
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransfersIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Get a money transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns></returns>
        void TransfersIdGet (string id);

        /// <summary>
        /// Get a money transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransfersIdGetWithHttpInfo (string id);
        /// <summary>
        /// Transfer money
        /// </summary>
        /// <remarks>
        /// This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TransferResponse</returns>
        TransferResponse TransfersPost (TransferRequest body = null);

        /// <summary>
        /// Transfer money
        /// </summary>
        /// <remarks>
        /// This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransferResponse</returns>
        ApiResponse<TransferResponse> TransfersPostWithHttpInfo (TransferRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List transfer sources
        /// </summary>
        /// <remarks>
        /// Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SourcesGetAsync ();

        /// <summary>
        /// List transfer sources
        /// </summary>
        /// <remarks>
        /// Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SourcesGetAsyncWithHttpInfo ();
        /// <summary>
        /// List transfer source&#x27;s destinations
        /// </summary>
        /// <remarks>
        /// Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SourcesIdDestinationsGetAsync (string id);

        /// <summary>
        /// List transfer source&#x27;s destinations
        /// </summary>
        /// <remarks>
        /// Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SourcesIdDestinationsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// List money transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransferList</returns>
        System.Threading.Tasks.Task<TransferList> TransfersGetAsync ();

        /// <summary>
        /// List money transfers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransferList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferList>> TransfersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Cancel a money transfer
        /// </summary>
        /// <remarks>
        /// Only delayed or recurring money transfer can be canceled
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransfersIdDeleteAsync (string id);

        /// <summary>
        /// Cancel a money transfer
        /// </summary>
        /// <remarks>
        /// Only delayed or recurring money transfer can be canceled
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransfersIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a money transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransfersIdGetAsync (string id);

        /// <summary>
        /// Get a money transfer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransfersIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Transfer money
        /// </summary>
        /// <remarks>
        /// This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransferResponse</returns>
        System.Threading.Tasks.Task<TransferResponse> TransfersPostAsync (TransferRequest body = null);

        /// <summary>
        /// Transfer money
        /// </summary>
        /// <remarks>
        /// This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferResponse>> TransfersPostAsyncWithHttpInfo (TransferRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TransfersApi : ITransfersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransfersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransfersApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransfersApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransfersApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransfersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransfersApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List transfer sources Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SourcesGet ()
        {
             SourcesGetWithHttpInfo();
        }

        /// <summary>
        /// List transfer sources Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SourcesGetWithHttpInfo ()
        {

            var localVarPath = "/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List transfer sources Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SourcesGetAsync ()
        {
             await SourcesGetAsyncWithHttpInfo();

        }

        /// <summary>
        /// List transfer sources Not all bank accounts can be used as a source for a money transfers. This operation returns only the accounts elligible as a money transfer source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SourcesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourcesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List transfer source&#x27;s destinations Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns></returns>
        public void SourcesIdDestinationsGet (string id)
        {
             SourcesIdDestinationsGetWithHttpInfo(id);
        }

        /// <summary>
        /// List transfer source&#x27;s destinations Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SourcesIdDestinationsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransfersApi->SourcesIdDestinationsGet");

            var localVarPath = "/sources/{id}/destinations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourcesIdDestinationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List transfer source&#x27;s destinations Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SourcesIdDestinationsGetAsync (string id)
        {
             await SourcesIdDestinationsGetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// List transfer source&#x27;s destinations Depending on the source account, only specific beneficiaries or accounts can be used as a money transfer destination. This operation returns them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Source&#x27;s id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SourcesIdDestinationsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransfersApi->SourcesIdDestinationsGet");

            var localVarPath = "/sources/{id}/destinations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SourcesIdDestinationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List money transfers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransferList</returns>
        public TransferList TransfersGet ()
        {
             ApiResponse<TransferList> localVarResponse = TransfersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List money transfers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransferList</returns>
        public ApiResponse< TransferList > TransfersGetWithHttpInfo ()
        {

            var localVarPath = "/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransferList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferList)));
        }

        /// <summary>
        /// List money transfers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransferList</returns>
        public async System.Threading.Tasks.Task<TransferList> TransfersGetAsync ()
        {
             ApiResponse<TransferList> localVarResponse = await TransfersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List money transfers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransferList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransferList>> TransfersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransferList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferList)));
        }

        /// <summary>
        /// Cancel a money transfer Only delayed or recurring money transfer can be canceled
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns></returns>
        public void TransfersIdDelete (string id)
        {
             TransfersIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel a money transfer Only delayed or recurring money transfer can be canceled
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransfersIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransfersApi->TransfersIdDelete");

            var localVarPath = "/transfers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a money transfer Only delayed or recurring money transfer can be canceled
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransfersIdDeleteAsync (string id)
        {
             await TransfersIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Cancel a money transfer Only delayed or recurring money transfer can be canceled
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransfersIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransfersApi->TransfersIdDelete");

            var localVarPath = "/transfers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a money transfer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns></returns>
        public void TransfersIdGet (string id)
        {
             TransfersIdGetWithHttpInfo(id);
        }

        /// <summary>
        /// Get a money transfer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransfersIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransfersApi->TransfersIdGet");

            var localVarPath = "/transfers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a money transfer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransfersIdGetAsync (string id)
        {
             await TransfersIdGetAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Get a money transfer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Transfer&#x27;s id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransfersIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TransfersApi->TransfersIdGet");

            var localVarPath = "/transfers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Transfer money This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TransferResponse</returns>
        public TransferResponse TransfersPost (TransferRequest body = null)
        {
             ApiResponse<TransferResponse> localVarResponse = TransfersPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer money This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TransferResponse</returns>
        public ApiResponse< TransferResponse > TransfersPostWithHttpInfo (TransferRequest body = null)
        {

            var localVarPath = "/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferResponse)));
        }

        /// <summary>
        /// Transfer money This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TransferResponse</returns>
        public async System.Threading.Tasks.Task<TransferResponse> TransfersPostAsync (TransferRequest body = null)
        {
             ApiResponse<TransferResponse> localVarResponse = await TransfersPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer money This operation allows one to transfer an &#x60;amount&#x60; of money from a &#x60;source&#x60; account to a &#x60;destination&#x60; account. There are three different types of money transfer:   - Immediate - - these are executed as soon as the request is received    - Delayed - - these are executed upon a given future &#x60;date&#x60;   - Recurring - - these are executed a given &#x60;occurrences&#x60; number of times at a given &#x60;frequency&#x60; - - the first occurrence being executed immediately or at a given &#x60;date&#x60; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransferResponse>> TransfersPostAsyncWithHttpInfo (TransferRequest body = null)
        {

            var localVarPath = "/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (POAPIScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransferResponse)));
        }

    }
}
